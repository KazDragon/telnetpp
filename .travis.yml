sudo: false
language: cpp

linux_gcc: &linux_gcc
  os: linux
  dist: xenial
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - g++-5
        - libgtest-dev
        - boost1.74

linux_clang: &linux_clang
  os: linux
  dist: xenial
  compiler: clang
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-trusty-4.0
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - clang-4.0
        - libgtest-dev
        - boost1.74

matrix:
  include:
  - <<: *linux_gcc
      - MATRIX_EVAL="CC=gcc-5 && CXX=5++-5 && CONFIG=Release && SHARED=False && USE_CONAN=True"

#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False"
#
#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=True"
#
#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=False"
#
#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=True"
#
#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && SANITIZE=address"
#
#  - <<: *linux_gcc
#    env:
#      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && COVERAGE=True"
#
#  - <<: *linux_clang
#    env:
#     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=False"
#
#  - <<: *linux_clang
#    env:
#     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=True"
#
#  - <<: *linux_clang
#    env:
#     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=False"
#
#  - <<: *linux_clang
#    env:
#     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=False"

cache:
  - apt: true
  - directories:
    - $HOME/lcov
    - $HOME/3party
    - $HOME/.conan

before_install:
# Set up CC/CXX variables.
  - eval "${MATRIX_EVAL}"
  - export EXTERNAL_ROOT=$HOME/3party
  - export COVERAGE=${COVERAGE:-False}
  - export SANITIZE=${SANITIZE:-off}
  - export BUILD_SHARED_LIBS=$SHARED

# install coverage software
  - if [ "$COVERAGE" == "True" ]; then gem install coveralls-lcov; fi
  
# Ensure that the correct coverage tools are installed if necessary.
  - if [ "$COVERAGE" == "True" ]; then
      if [ ! -d "$HOME/lcov/usr/local/bin/lcov" ]; then
        mkdir $HOME/lcov-build || true;
        cd $HOME/lcov-build;
        wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz;
        tar -xzf lcov_1.13.orig.tar.gz;
        mkdir -p $HOME/lcov || true;
        DESTDIR=$HOME/lcov make -C lcov-1.13/ install;
        cd -;
      fi
    fi
  - export LCOV=$HOME/lcov/usr/local/bin/lcov

# Install any external dependencies
  - if [ "$USE_CONAN" == "True" ]; then
      ./.travis/fetch_conan_dependencies.sh;
    else
      ./.travis/fetch_system_dependencies.sh;
    fi

before_script:
  - mkdir build || true
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=$CONFIG -DTELNETPP_SANITIZE=$SANITIZE -DTELNETPP_COVERAGE=$COVERAGE -DCMAKE_PREFIX_PATH=$EXTERNAL_ROOT ..

script:
  - make VERBOSE=1
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory . --zerocounters -q;
    fi
  - make test

after_failure:
  - cat Testing/Temporary/LastTest.log

after_success:
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory .  --capture --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --remove coverage.info '*/test/*' '/usr/*' '*/3party/*' --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --list coverage.info;
        coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi

notifications:
  email:
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
  slack:
    rooms:
      - kazdragon:E8B4Cs4p3TiVLqHAq8wYYTr3#ci
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/dd988061905795003d31
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always

